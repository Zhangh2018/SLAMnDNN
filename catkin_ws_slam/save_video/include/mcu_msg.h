// Generated by gencpp from file comm_mcu/mcu_msg.msg
// DO NOT EDIT!


#ifndef COMM_MCU_MESSAGE_MCU_MSG_H
#define COMM_MCU_MESSAGE_MCU_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <comm_mcu/lots_msg.h>

namespace comm_mcu
{
template <class ContainerAllocator>
struct mcu_msg_
{
  typedef mcu_msg_<ContainerAllocator> Type;

  mcu_msg_()
    : lots()
    , radar1_alarm_level(0)
    , radar2_alarm_level(0)
    , radar3_alarm_level(0)
    , radar4_alarm_level(0)
    , radar5_alarm_level(0)
    , radar6_alarm_level(0)
    , radar7_alarm_level(0)
    , radar8_alarm_level(0)
    , radar9_alarm_level(0)
    , radar10_alarm_level(0)
    , radar11_alarm_level(0)
    , radar12_alarm_level(0)
    , radar13_alarm_level(0)
    , radar14_alarm_level(0)
    , radar15_alarm_level(0)
    , radar16_alarm_level(0)
    , parking_rect_point0_x(0)
    , parking_rect_point0_y(0)
    , parking_rect_point1_x(0)
    , parking_rect_point1_y(0)
    , parking_rect_point2_x(0)
    , parking_rect_point2_y(0)
    , parking_rect_point3_x(0)
    , parking_rect_point3_y(0)
    , GPS_x(0)
    , GPS_y(0)
    , GPS_z(0)
    , car_parking_status(0)
    , TimeStampex()
    , trail_arc_radius(0)
    , trail_arc_angle(0)
    , parking_mode_select01(0)
    , parking_mode_select02(0)
    , gear_status_actual(0)
    , gear_status_pre(0)
    , McuKey(0)
    , WheelSpeed()
    , radar_begin_sec(0)
    , radar_begin_usec(0)
    , radar_end_sec(0)
    , radar_end_usec(0)  {
    }
  mcu_msg_(const ContainerAllocator& _alloc)
    : lots(_alloc)
    , radar1_alarm_level(0)
    , radar2_alarm_level(0)
    , radar3_alarm_level(0)
    , radar4_alarm_level(0)
    , radar5_alarm_level(0)
    , radar6_alarm_level(0)
    , radar7_alarm_level(0)
    , radar8_alarm_level(0)
    , radar9_alarm_level(0)
    , radar10_alarm_level(0)
    , radar11_alarm_level(0)
    , radar12_alarm_level(0)
    , radar13_alarm_level(0)
    , radar14_alarm_level(0)
    , radar15_alarm_level(0)
    , radar16_alarm_level(0)
    , parking_rect_point0_x(0)
    , parking_rect_point0_y(0)
    , parking_rect_point1_x(0)
    , parking_rect_point1_y(0)
    , parking_rect_point2_x(0)
    , parking_rect_point2_y(0)
    , parking_rect_point3_x(0)
    , parking_rect_point3_y(0)
    , GPS_x(0)
    , GPS_y(0)
    , GPS_z(0)
    , car_parking_status(0)
    , TimeStampex(_alloc)
    , trail_arc_radius(0)
    , trail_arc_angle(0)
    , parking_mode_select01(0)
    , parking_mode_select02(0)
    , gear_status_actual(0)
    , gear_status_pre(0)
    , McuKey(0)
    , WheelSpeed(_alloc)
    , radar_begin_sec(0)
    , radar_begin_usec(0)
    , radar_end_sec(0)
    , radar_end_usec(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::comm_mcu::lots_msg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::comm_mcu::lots_msg_<ContainerAllocator> >::other >  _lots_type;
  _lots_type lots;

   typedef int8_t _radar1_alarm_level_type;
  _radar1_alarm_level_type radar1_alarm_level;

   typedef int8_t _radar2_alarm_level_type;
  _radar2_alarm_level_type radar2_alarm_level;

   typedef int8_t _radar3_alarm_level_type;
  _radar3_alarm_level_type radar3_alarm_level;

   typedef int8_t _radar4_alarm_level_type;
  _radar4_alarm_level_type radar4_alarm_level;

   typedef int8_t _radar5_alarm_level_type;
  _radar5_alarm_level_type radar5_alarm_level;

   typedef int8_t _radar6_alarm_level_type;
  _radar6_alarm_level_type radar6_alarm_level;

   typedef int8_t _radar7_alarm_level_type;
  _radar7_alarm_level_type radar7_alarm_level;

   typedef int8_t _radar8_alarm_level_type;
  _radar8_alarm_level_type radar8_alarm_level;

   typedef int8_t _radar9_alarm_level_type;
  _radar9_alarm_level_type radar9_alarm_level;

   typedef int8_t _radar10_alarm_level_type;
  _radar10_alarm_level_type radar10_alarm_level;

   typedef int8_t _radar11_alarm_level_type;
  _radar11_alarm_level_type radar11_alarm_level;

   typedef int8_t _radar12_alarm_level_type;
  _radar12_alarm_level_type radar12_alarm_level;

   typedef int8_t _radar13_alarm_level_type;
  _radar13_alarm_level_type radar13_alarm_level;

   typedef int8_t _radar14_alarm_level_type;
  _radar14_alarm_level_type radar14_alarm_level;

   typedef int8_t _radar15_alarm_level_type;
  _radar15_alarm_level_type radar15_alarm_level;

   typedef int8_t _radar16_alarm_level_type;
  _radar16_alarm_level_type radar16_alarm_level;

   typedef int16_t _parking_rect_point0_x_type;
  _parking_rect_point0_x_type parking_rect_point0_x;

   typedef int16_t _parking_rect_point0_y_type;
  _parking_rect_point0_y_type parking_rect_point0_y;

   typedef int16_t _parking_rect_point1_x_type;
  _parking_rect_point1_x_type parking_rect_point1_x;

   typedef int16_t _parking_rect_point1_y_type;
  _parking_rect_point1_y_type parking_rect_point1_y;

   typedef int16_t _parking_rect_point2_x_type;
  _parking_rect_point2_x_type parking_rect_point2_x;

   typedef int16_t _parking_rect_point2_y_type;
  _parking_rect_point2_y_type parking_rect_point2_y;

   typedef int16_t _parking_rect_point3_x_type;
  _parking_rect_point3_x_type parking_rect_point3_x;

   typedef int16_t _parking_rect_point3_y_type;
  _parking_rect_point3_y_type parking_rect_point3_y;

   typedef int16_t _GPS_x_type;
  _GPS_x_type GPS_x;

   typedef int16_t _GPS_y_type;
  _GPS_y_type GPS_y;

   typedef int16_t _GPS_z_type;
  _GPS_z_type GPS_z;

   typedef int8_t _car_parking_status_type;
  _car_parking_status_type car_parking_status;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _TimeStampex_type;
  _TimeStampex_type TimeStampex;

   typedef int16_t _trail_arc_radius_type;
  _trail_arc_radius_type trail_arc_radius;

   typedef int16_t _trail_arc_angle_type;
  _trail_arc_angle_type trail_arc_angle;

   typedef int8_t _parking_mode_select01_type;
  _parking_mode_select01_type parking_mode_select01;

   typedef int8_t _parking_mode_select02_type;
  _parking_mode_select02_type parking_mode_select02;

   typedef int8_t _gear_status_actual_type;
  _gear_status_actual_type gear_status_actual;

   typedef int8_t _gear_status_pre_type;
  _gear_status_pre_type gear_status_pre;

   typedef int8_t _McuKey_type;
  _McuKey_type McuKey;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _WheelSpeed_type;
  _WheelSpeed_type WheelSpeed;

   typedef int32_t _radar_begin_sec_type;
  _radar_begin_sec_type radar_begin_sec;

   typedef int32_t _radar_begin_usec_type;
  _radar_begin_usec_type radar_begin_usec;

   typedef int32_t _radar_end_sec_type;
  _radar_end_sec_type radar_end_sec;

   typedef int32_t _radar_end_usec_type;
  _radar_end_usec_type radar_end_usec;





  typedef boost::shared_ptr< ::comm_mcu::mcu_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::comm_mcu::mcu_msg_<ContainerAllocator> const> ConstPtr;

}; // struct mcu_msg_

typedef ::comm_mcu::mcu_msg_<std::allocator<void> > mcu_msg;

typedef boost::shared_ptr< ::comm_mcu::mcu_msg > mcu_msgPtr;
typedef boost::shared_ptr< ::comm_mcu::mcu_msg const> mcu_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::comm_mcu::mcu_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::comm_mcu::mcu_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace comm_mcu

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'comm_mcu': ['/home/intesight/catkin_ws_slam/src/comm_mcu/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::comm_mcu::mcu_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm_mcu::mcu_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comm_mcu::mcu_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comm_mcu::mcu_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm_mcu::mcu_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm_mcu::mcu_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::comm_mcu::mcu_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b398982b7be22c6c62867673b44595f";
  }

  static const char* value(const ::comm_mcu::mcu_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b398982b7be22c6ULL;
  static const uint64_t static_value2 = 0xc62867673b44595fULL;
};

template<class ContainerAllocator>
struct DataType< ::comm_mcu::mcu_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comm_mcu/mcu_msg";
  }

  static const char* value(const ::comm_mcu::mcu_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::comm_mcu::mcu_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comm_mcu/lots_msg[] lots\n\
\n\
int8 radar1_alarm_level\n\
int8 radar2_alarm_level\n\
int8 radar3_alarm_level\n\
int8 radar4_alarm_level\n\
int8 radar5_alarm_level\n\
int8 radar6_alarm_level\n\
int8 radar7_alarm_level\n\
int8 radar8_alarm_level\n\
int8 radar9_alarm_level\n\
int8 radar10_alarm_level\n\
int8 radar11_alarm_level\n\
int8 radar12_alarm_level\n\
int8 radar13_alarm_level\n\
int8 radar14_alarm_level\n\
int8 radar15_alarm_level\n\
int8 radar16_alarm_level\n\
\n\
int16 parking_rect_point0_x\n\
int16 parking_rect_point0_y\n\
int16 parking_rect_point1_x\n\
int16 parking_rect_point1_y\n\
int16 parking_rect_point2_x\n\
int16 parking_rect_point2_y\n\
int16 parking_rect_point3_x\n\
int16 parking_rect_point3_y\n\
\n\
int16 GPS_x\n\
int16 GPS_y\n\
int16 GPS_z\n\
\n\
int8 car_parking_status\n\
int16[] TimeStampex\n\
\n\
int16 trail_arc_radius\n\
int16 trail_arc_angle\n\
int8  parking_mode_select01\n\
int8  parking_mode_select02\n\
int8 gear_status_actual\n\
int8 gear_status_pre\n\
int8 McuKey\n\
int16[] WheelSpeed\n\
\n\
int32 radar_begin_sec\n\
int32 radar_begin_usec\n\
int32 radar_end_sec\n\
int32 radar_end_usec\n\
================================================================================\n\
MSG: comm_mcu/lots_msg\n\
int16 p0_x\n\
int16 p0_y\n\
int16 p1_x\n\
int16 p1_y\n\
int16 p2_x\n\
int16 p2_y\n\
int16 p3_x\n\
int16 p3_y\n\
";
  }

  static const char* value(const ::comm_mcu::mcu_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::comm_mcu::mcu_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lots);
      stream.next(m.radar1_alarm_level);
      stream.next(m.radar2_alarm_level);
      stream.next(m.radar3_alarm_level);
      stream.next(m.radar4_alarm_level);
      stream.next(m.radar5_alarm_level);
      stream.next(m.radar6_alarm_level);
      stream.next(m.radar7_alarm_level);
      stream.next(m.radar8_alarm_level);
      stream.next(m.radar9_alarm_level);
      stream.next(m.radar10_alarm_level);
      stream.next(m.radar11_alarm_level);
      stream.next(m.radar12_alarm_level);
      stream.next(m.radar13_alarm_level);
      stream.next(m.radar14_alarm_level);
      stream.next(m.radar15_alarm_level);
      stream.next(m.radar16_alarm_level);
      stream.next(m.parking_rect_point0_x);
      stream.next(m.parking_rect_point0_y);
      stream.next(m.parking_rect_point1_x);
      stream.next(m.parking_rect_point1_y);
      stream.next(m.parking_rect_point2_x);
      stream.next(m.parking_rect_point2_y);
      stream.next(m.parking_rect_point3_x);
      stream.next(m.parking_rect_point3_y);
      stream.next(m.GPS_x);
      stream.next(m.GPS_y);
      stream.next(m.GPS_z);
      stream.next(m.car_parking_status);
      stream.next(m.TimeStampex);
      stream.next(m.trail_arc_radius);
      stream.next(m.trail_arc_angle);
      stream.next(m.parking_mode_select01);
      stream.next(m.parking_mode_select02);
      stream.next(m.gear_status_actual);
      stream.next(m.gear_status_pre);
      stream.next(m.McuKey);
      stream.next(m.WheelSpeed);
      stream.next(m.radar_begin_sec);
      stream.next(m.radar_begin_usec);
      stream.next(m.radar_end_sec);
      stream.next(m.radar_end_usec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mcu_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::comm_mcu::mcu_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::comm_mcu::mcu_msg_<ContainerAllocator>& v)
  {
    s << indent << "lots[]" << std::endl;
    for (size_t i = 0; i < v.lots.size(); ++i)
    {
      s << indent << "  lots[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::comm_mcu::lots_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.lots[i]);
    }
    s << indent << "radar1_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar1_alarm_level);
    s << indent << "radar2_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar2_alarm_level);
    s << indent << "radar3_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar3_alarm_level);
    s << indent << "radar4_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar4_alarm_level);
    s << indent << "radar5_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar5_alarm_level);
    s << indent << "radar6_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar6_alarm_level);
    s << indent << "radar7_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar7_alarm_level);
    s << indent << "radar8_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar8_alarm_level);
    s << indent << "radar9_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar9_alarm_level);
    s << indent << "radar10_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar10_alarm_level);
    s << indent << "radar11_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar11_alarm_level);
    s << indent << "radar12_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar12_alarm_level);
    s << indent << "radar13_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar13_alarm_level);
    s << indent << "radar14_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar14_alarm_level);
    s << indent << "radar15_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar15_alarm_level);
    s << indent << "radar16_alarm_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar16_alarm_level);
    s << indent << "parking_rect_point0_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.parking_rect_point0_x);
    s << indent << "parking_rect_point0_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.parking_rect_point0_y);
    s << indent << "parking_rect_point1_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.parking_rect_point1_x);
    s << indent << "parking_rect_point1_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.parking_rect_point1_y);
    s << indent << "parking_rect_point2_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.parking_rect_point2_x);
    s << indent << "parking_rect_point2_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.parking_rect_point2_y);
    s << indent << "parking_rect_point3_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.parking_rect_point3_x);
    s << indent << "parking_rect_point3_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.parking_rect_point3_y);
    s << indent << "GPS_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GPS_x);
    s << indent << "GPS_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GPS_y);
    s << indent << "GPS_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GPS_z);
    s << indent << "car_parking_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.car_parking_status);
    s << indent << "TimeStampex[]" << std::endl;
    for (size_t i = 0; i < v.TimeStampex.size(); ++i)
    {
      s << indent << "  TimeStampex[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.TimeStampex[i]);
    }
    s << indent << "trail_arc_radius: ";
    Printer<int16_t>::stream(s, indent + "  ", v.trail_arc_radius);
    s << indent << "trail_arc_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.trail_arc_angle);
    s << indent << "parking_mode_select01: ";
    Printer<int8_t>::stream(s, indent + "  ", v.parking_mode_select01);
    s << indent << "parking_mode_select02: ";
    Printer<int8_t>::stream(s, indent + "  ", v.parking_mode_select02);
    s << indent << "gear_status_actual: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gear_status_actual);
    s << indent << "gear_status_pre: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gear_status_pre);
    s << indent << "McuKey: ";
    Printer<int8_t>::stream(s, indent + "  ", v.McuKey);
    s << indent << "WheelSpeed[]" << std::endl;
    for (size_t i = 0; i < v.WheelSpeed.size(); ++i)
    {
      s << indent << "  WheelSpeed[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.WheelSpeed[i]);
    }
    s << indent << "radar_begin_sec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radar_begin_sec);
    s << indent << "radar_begin_usec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radar_begin_usec);
    s << indent << "radar_end_sec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radar_end_sec);
    s << indent << "radar_end_usec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radar_end_usec);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMM_MCU_MESSAGE_MCU_MSG_H
