/* Auto-generated by genmsg_cpp for file /home/liuli/rosbuild_ws/package_dir/lsd_slam/lsd_slam_core/msg/lsdLocationMsg.msg */
#ifndef LSD_SLAM_CORE_MESSAGE_LSDLOCATIONMSG_H
#define LSD_SLAM_CORE_MESSAGE_LSDLOCATIONMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace lsd_slam_core
{
template <class ContainerAllocator>
struct lsdLocationMsg_ {
  typedef lsdLocationMsg_<ContainerAllocator> Type;

  lsdLocationMsg_()
  : location_x()
  , location_y()
  , location_z()
  , angle()
  {
  }

  lsdLocationMsg_(const ContainerAllocator& _alloc)
  : location_x(_alloc)
  , location_y(_alloc)
  , location_z(_alloc)
  , angle(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _location_x_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  location_x;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _location_y_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  location_y;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _location_z_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  location_z;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angle_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  angle;


  typedef boost::shared_ptr< ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct lsdLocationMsg
typedef  ::lsd_slam_core::lsdLocationMsg_<std::allocator<void> > lsdLocationMsg;

typedef boost::shared_ptr< ::lsd_slam_core::lsdLocationMsg> lsdLocationMsgPtr;
typedef boost::shared_ptr< ::lsd_slam_core::lsdLocationMsg const> lsdLocationMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace lsd_slam_core

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "25715642e682f8de8549d059f1c67609";
  }

  static const char* value(const  ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x25715642e682f8deULL;
  static const uint64_t static_value2 = 0x8549d059f1c67609ULL;
};

template<class ContainerAllocator>
struct DataType< ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "lsd_slam_core/lsdLocationMsg";
  }

  static const char* value(const  ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float32[] location_x\n\
float32[] location_y\n\
float32[] location_z\n\
float32[] angle\n\
\n\
";
  }

  static const char* value(const  ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.location_x);
    stream.next(m.location_y);
    stream.next(m.location_z);
    stream.next(m.angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct lsdLocationMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::lsd_slam_core::lsdLocationMsg_<ContainerAllocator> & v) 
  {
    s << indent << "location_x[]" << std::endl;
    for (size_t i = 0; i < v.location_x.size(); ++i)
    {
      s << indent << "  location_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.location_x[i]);
    }
    s << indent << "location_y[]" << std::endl;
    for (size_t i = 0; i < v.location_y.size(); ++i)
    {
      s << indent << "  location_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.location_y[i]);
    }
    s << indent << "location_z[]" << std::endl;
    for (size_t i = 0; i < v.location_z.size(); ++i)
    {
      s << indent << "  location_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.location_z[i]);
    }
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // LSD_SLAM_CORE_MESSAGE_LSDLOCATIONMSG_H

