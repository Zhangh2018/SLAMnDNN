// Generated by gencpp from file intesight_parkinggo/groundPoint.msg
// DO NOT EDIT!


#ifndef INTESIGHT_PARKINGGO_MESSAGE_GROUNDPOINT_H
#define INTESIGHT_PARKINGGO_MESSAGE_GROUNDPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace intesight_parkinggo
{
template <class ContainerAllocator>
struct groundPoint_
{
  typedef groundPoint_<ContainerAllocator> Type;

  groundPoint_()
    : time(0.0)
    , point1()
    , point2()  {
    }
  groundPoint_(const ContainerAllocator& _alloc)
    : time(0.0)
    , point1(_alloc)
    , point2(_alloc)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _point1_type;
  _point1_type point1;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _point2_type;
  _point2_type point2;





  typedef boost::shared_ptr< ::intesight_parkinggo::groundPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::intesight_parkinggo::groundPoint_<ContainerAllocator> const> ConstPtr;

}; // struct groundPoint_

typedef ::intesight_parkinggo::groundPoint_<std::allocator<void> > groundPoint;

typedef boost::shared_ptr< ::intesight_parkinggo::groundPoint > groundPointPtr;
typedef boost::shared_ptr< ::intesight_parkinggo::groundPoint const> groundPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::intesight_parkinggo::groundPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::intesight_parkinggo::groundPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace intesight_parkinggo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'intesight_parkinggo': ['/home/intesight/catkin_ws/src/intesight_parkinggo/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::intesight_parkinggo::groundPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::intesight_parkinggo::groundPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intesight_parkinggo::groundPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intesight_parkinggo::groundPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intesight_parkinggo::groundPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intesight_parkinggo::groundPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::intesight_parkinggo::groundPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e5e1cba800975b3103e002f40f764a0";
  }

  static const char* value(const ::intesight_parkinggo::groundPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e5e1cba800975b3ULL;
  static const uint64_t static_value2 = 0x103e002f40f764a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::intesight_parkinggo::groundPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "intesight_parkinggo/groundPoint";
  }

  static const char* value(const ::intesight_parkinggo::groundPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::intesight_parkinggo::groundPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n\
\n\
float32[] point1\n\
float32[] point2\n\
";
  }

  static const char* value(const ::intesight_parkinggo::groundPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::intesight_parkinggo::groundPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.point1);
      stream.next(m.point2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct groundPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::intesight_parkinggo::groundPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::intesight_parkinggo::groundPoint_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "point1[]" << std::endl;
    for (size_t i = 0; i < v.point1.size(); ++i)
    {
      s << indent << "  point1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.point1[i]);
    }
    s << indent << "point2[]" << std::endl;
    for (size_t i = 0; i < v.point2.size(); ++i)
    {
      s << indent << "  point2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.point2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTESIGHT_PARKINGGO_MESSAGE_GROUNDPOINT_H
