// Generated by gencpp from file ttmsg/radar_msg.msg
// DO NOT EDIT!


#ifndef TTMSG_MESSAGE_RADAR_MSG_H
#define TTMSG_MESSAGE_RADAR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include "parking_position.h"

namespace ttmsg
{
template <class ContainerAllocator>
struct radar_msg_
{
  typedef radar_msg_<ContainerAllocator> Type;

  radar_msg_()
    : data()
    , radar1_alarm_level(0)
    , radar2_alarm_level(0)
    , radar3_alarm_level(0)
    , radar4_alarm_level(0)
    , radar5_alarm_level(0)
    , radar6_alarm_level(0)
    , radar7_alarm_level(0)
    , radar8_alarm_level(0)
    , radar9_alarm_level(0)
    , radar10_alarm_level(0)
    , radar11_alarm_level(0)
    , radar12_alarm_level(0)
    , radar13_alarm_level(0)
    , radar14_alarm_level(0)
    , radar15_alarm_level(0)
    , radar16_alarm_level(0)
    , parking_mode_select(0)
    , parking_mode_ok(0)
    , parking_mode_ok_flag(0)
    , gear_status_actual(0)
    , gear_status_pre(0)
    , auto_parking_status(0)
    , parking_rect_point0_x(0)
    , parking_rect_point0_y(0)
    , parking_rect_point1_x(0)
    , parking_rect_point1_y(0)
    , parking_rect_point2_x(0)
    , parking_rect_point2_y(0)
    , parking_rect_point3_x(0)
    , parking_rect_point3_y(0)
    , trail_arc_radius(0)
    , trail_arc_angle(0)  {
    }
  radar_msg_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , radar1_alarm_level(0)
    , radar2_alarm_level(0)
    , radar3_alarm_level(0)
    , radar4_alarm_level(0)
    , radar5_alarm_level(0)
    , radar6_alarm_level(0)
    , radar7_alarm_level(0)
    , radar8_alarm_level(0)
    , radar9_alarm_level(0)
    , radar10_alarm_level(0)
    , radar11_alarm_level(0)
    , radar12_alarm_level(0)
    , radar13_alarm_level(0)
    , radar14_alarm_level(0)
    , radar15_alarm_level(0)
    , radar16_alarm_level(0)
    , parking_mode_select(0)
    , parking_mode_ok(0)
    , parking_mode_ok_flag(0)
    , gear_status_actual(0)
    , gear_status_pre(0)
    , auto_parking_status(0)
    , parking_rect_point0_x(0)
    , parking_rect_point0_y(0)
    , parking_rect_point1_x(0)
    , parking_rect_point1_y(0)
    , parking_rect_point2_x(0)
    , parking_rect_point2_y(0)
    , parking_rect_point3_x(0)
    , parking_rect_point3_y(0)
    , trail_arc_radius(0)
    , trail_arc_angle(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::ttmsg::parking_position_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ttmsg::parking_position_<ContainerAllocator> >::other >  _data_type;
  _data_type data;

   typedef int64_t _radar1_alarm_level_type;
  _radar1_alarm_level_type radar1_alarm_level;

   typedef int64_t _radar2_alarm_level_type;
  _radar2_alarm_level_type radar2_alarm_level;

   typedef int64_t _radar3_alarm_level_type;
  _radar3_alarm_level_type radar3_alarm_level;

   typedef int64_t _radar4_alarm_level_type;
  _radar4_alarm_level_type radar4_alarm_level;

   typedef int64_t _radar5_alarm_level_type;
  _radar5_alarm_level_type radar5_alarm_level;

   typedef int64_t _radar6_alarm_level_type;
  _radar6_alarm_level_type radar6_alarm_level;

   typedef int64_t _radar7_alarm_level_type;
  _radar7_alarm_level_type radar7_alarm_level;

   typedef int64_t _radar8_alarm_level_type;
  _radar8_alarm_level_type radar8_alarm_level;

   typedef int64_t _radar9_alarm_level_type;
  _radar9_alarm_level_type radar9_alarm_level;

   typedef int64_t _radar10_alarm_level_type;
  _radar10_alarm_level_type radar10_alarm_level;

   typedef int64_t _radar11_alarm_level_type;
  _radar11_alarm_level_type radar11_alarm_level;

   typedef int64_t _radar12_alarm_level_type;
  _radar12_alarm_level_type radar12_alarm_level;

   typedef int64_t _radar13_alarm_level_type;
  _radar13_alarm_level_type radar13_alarm_level;

   typedef int64_t _radar14_alarm_level_type;
  _radar14_alarm_level_type radar14_alarm_level;

   typedef int64_t _radar15_alarm_level_type;
  _radar15_alarm_level_type radar15_alarm_level;

   typedef int64_t _radar16_alarm_level_type;
  _radar16_alarm_level_type radar16_alarm_level;

   typedef int64_t _parking_mode_select_type;
  _parking_mode_select_type parking_mode_select;

   typedef int64_t _parking_mode_ok_type;
  _parking_mode_ok_type parking_mode_ok;

   typedef int64_t _parking_mode_ok_flag_type;
  _parking_mode_ok_flag_type parking_mode_ok_flag;

   typedef int64_t _gear_status_actual_type;
  _gear_status_actual_type gear_status_actual;

   typedef int64_t _gear_status_pre_type;
  _gear_status_pre_type gear_status_pre;

   typedef int64_t _auto_parking_status_type;
  _auto_parking_status_type auto_parking_status;

   typedef int64_t _parking_rect_point0_x_type;
  _parking_rect_point0_x_type parking_rect_point0_x;

   typedef int64_t _parking_rect_point0_y_type;
  _parking_rect_point0_y_type parking_rect_point0_y;

   typedef int64_t _parking_rect_point1_x_type;
  _parking_rect_point1_x_type parking_rect_point1_x;

   typedef int64_t _parking_rect_point1_y_type;
  _parking_rect_point1_y_type parking_rect_point1_y;

   typedef int64_t _parking_rect_point2_x_type;
  _parking_rect_point2_x_type parking_rect_point2_x;

   typedef int64_t _parking_rect_point2_y_type;
  _parking_rect_point2_y_type parking_rect_point2_y;

   typedef int64_t _parking_rect_point3_x_type;
  _parking_rect_point3_x_type parking_rect_point3_x;

   typedef int64_t _parking_rect_point3_y_type;
  _parking_rect_point3_y_type parking_rect_point3_y;

   typedef int64_t _trail_arc_radius_type;
  _trail_arc_radius_type trail_arc_radius;

   typedef int64_t _trail_arc_angle_type;
  _trail_arc_angle_type trail_arc_angle;




  typedef boost::shared_ptr< ::ttmsg::radar_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ttmsg::radar_msg_<ContainerAllocator> const> ConstPtr;

}; // struct radar_msg_

typedef ::ttmsg::radar_msg_<std::allocator<void> > radar_msg;

typedef boost::shared_ptr< ::ttmsg::radar_msg > radar_msgPtr;
typedef boost::shared_ptr< ::ttmsg::radar_msg const> radar_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ttmsg::radar_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ttmsg::radar_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ttmsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ttmsg': ['/home/wangjiangjing/catkin_ws/src/ttmsg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ttmsg::radar_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ttmsg::radar_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ttmsg::radar_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ttmsg::radar_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ttmsg::radar_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ttmsg::radar_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ttmsg::radar_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91d9e8f0045ca91ebcb14af053614af2";
  }

  static const char* value(const ::ttmsg::radar_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91d9e8f0045ca91eULL;
  static const uint64_t static_value2 = 0xbcb14af053614af2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ttmsg::radar_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ttmsg/radar_msg";
  }

  static const char* value(const ::ttmsg::radar_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ttmsg::radar_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "parking_position[] data\n\
int64 radar1_alarm_level\n\
int64 radar2_alarm_level\n\
int64 radar3_alarm_level\n\
int64 radar4_alarm_level\n\
int64 radar5_alarm_level\n\
int64 radar6_alarm_level\n\
int64 radar7_alarm_level\n\
int64 radar8_alarm_level\n\
int64 radar9_alarm_level\n\
int64 radar10_alarm_level\n\
int64 radar11_alarm_level\n\
int64 radar12_alarm_level\n\
int64 radar13_alarm_level\n\
int64 radar14_alarm_level\n\
int64 radar15_alarm_level\n\
int64 radar16_alarm_level\n\
\n\
int64 parking_mode_select\n\
int64 parking_mode_ok\n\
int64 parking_mode_ok_flag\n\
\n\
int64 gear_status_actual\n\
int64 gear_status_pre\n\
\n\
int64 auto_parking_status\n\
\n\
\n\
int64 parking_rect_point0_x\n\
int64 parking_rect_point0_y\n\
int64 parking_rect_point1_x\n\
int64 parking_rect_point1_y\n\
int64 parking_rect_point2_x\n\
int64 parking_rect_point2_y\n\
int64 parking_rect_point3_x\n\
int64 parking_rect_point3_y\n\
int64 trail_arc_radius\n\
int64 trail_arc_angle\n\
\n\
================================================================================\n\
MSG: ttmsg/parking_position\n\
int64 p0_x\n\
int64 p0_y\n\
int64 p1_x\n\
int64 p1_y\n\
int64 p2_x\n\
int64 p2_y\n\
int64 p3_x\n\
int64 p3_y\n\
";
  }

  static const char* value(const ::ttmsg::radar_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ttmsg::radar_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.radar1_alarm_level);
      stream.next(m.radar2_alarm_level);
      stream.next(m.radar3_alarm_level);
      stream.next(m.radar4_alarm_level);
      stream.next(m.radar5_alarm_level);
      stream.next(m.radar6_alarm_level);
      stream.next(m.radar7_alarm_level);
      stream.next(m.radar8_alarm_level);
      stream.next(m.radar9_alarm_level);
      stream.next(m.radar10_alarm_level);
      stream.next(m.radar11_alarm_level);
      stream.next(m.radar12_alarm_level);
      stream.next(m.radar13_alarm_level);
      stream.next(m.radar14_alarm_level);
      stream.next(m.radar15_alarm_level);
      stream.next(m.radar16_alarm_level);
      stream.next(m.parking_mode_select);
      stream.next(m.parking_mode_ok);
      stream.next(m.parking_mode_ok_flag);
      stream.next(m.gear_status_actual);
      stream.next(m.gear_status_pre);
      stream.next(m.auto_parking_status);
      stream.next(m.parking_rect_point0_x);
      stream.next(m.parking_rect_point0_y);
      stream.next(m.parking_rect_point1_x);
      stream.next(m.parking_rect_point1_y);
      stream.next(m.parking_rect_point2_x);
      stream.next(m.parking_rect_point2_y);
      stream.next(m.parking_rect_point3_x);
      stream.next(m.parking_rect_point3_y);
      stream.next(m.trail_arc_radius);
      stream.next(m.trail_arc_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radar_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ttmsg::radar_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ttmsg::radar_msg_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ttmsg::parking_position_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
    s << indent << "radar1_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar1_alarm_level);
    s << indent << "radar2_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar2_alarm_level);
    s << indent << "radar3_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar3_alarm_level);
    s << indent << "radar4_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar4_alarm_level);
    s << indent << "radar5_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar5_alarm_level);
    s << indent << "radar6_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar6_alarm_level);
    s << indent << "radar7_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar7_alarm_level);
    s << indent << "radar8_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar8_alarm_level);
    s << indent << "radar9_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar9_alarm_level);
    s << indent << "radar10_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar10_alarm_level);
    s << indent << "radar11_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar11_alarm_level);
    s << indent << "radar12_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar12_alarm_level);
    s << indent << "radar13_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar13_alarm_level);
    s << indent << "radar14_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar14_alarm_level);
    s << indent << "radar15_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar15_alarm_level);
    s << indent << "radar16_alarm_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radar16_alarm_level);
    s << indent << "parking_mode_select: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_mode_select);
    s << indent << "parking_mode_ok: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_mode_ok);
    s << indent << "parking_mode_ok_flag: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_mode_ok_flag);
    s << indent << "gear_status_actual: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gear_status_actual);
    s << indent << "gear_status_pre: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gear_status_pre);
    s << indent << "auto_parking_status: ";
    Printer<int64_t>::stream(s, indent + "  ", v.auto_parking_status);
    s << indent << "parking_rect_point0_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_rect_point0_x);
    s << indent << "parking_rect_point0_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_rect_point0_y);
    s << indent << "parking_rect_point1_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_rect_point1_x);
    s << indent << "parking_rect_point1_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_rect_point1_y);
    s << indent << "parking_rect_point2_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_rect_point2_x);
    s << indent << "parking_rect_point2_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_rect_point2_y);
    s << indent << "parking_rect_point3_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_rect_point3_x);
    s << indent << "parking_rect_point3_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.parking_rect_point3_y);
    s << indent << "trail_arc_radius: ";
    Printer<int64_t>::stream(s, indent + "  ", v.trail_arc_radius);
    s << indent << "trail_arc_angle: ";
    Printer<int64_t>::stream(s, indent + "  ", v.trail_arc_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TTMSG_MESSAGE_RADAR_MSG_H
